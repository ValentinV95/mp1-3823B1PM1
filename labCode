#include "stdio.h"
#include <algorithm>
#include <cmath>
#include <time.h>

#pragma warning(disable : 4996)

#define uchar unsigned char 

void bubleSort(float* a, int n)
{
	int i, j, flag;
	float ep = 1e-7;
	for (i = 0; i < n - 1; i++)
	{
		flag = 1;
		for (j = n - 1; j > i; j--)
		{
			if (a[j] - a[j - 1] < ep)
			{
				std::swap(a[j], a[j - 1]);
				flag = 0;
			}
		}
		if (flag) break;
	}
	return;
}

void shellSort(float* a, int n)
{
	int step, i, j;
	float v;
	float ep = 1e-7;

	for (step = 1; step < (n - 1) / 9; step = 3 * step + 1); //1 4 13 40 121 364 1093

	for (; step > 0; step /= 3)
	{
		for (i = step; i < n; i++)
		{
			for (j = i; j >= step && a[j] < a[j - step]; j -= step)
				std::swap(a[j], a[j - step]);
		}
	}
	return;
}

int getByte(float item, int numberByte)
{
	uchar* t = (uchar*)&item;
	return t[numberByte];
}

void radixSort(float* a, int n)
{
	float* b = (float*)malloc(n * sizeof(float));
	int* count = (int*)malloc(257 * sizeof(int));
	
	int d, i, j, mid;
	float ep = 1e-7;

	for (d = 0; d < sizeof(float); d++)
	{
		for (j = 0; j < 257; j++) count[j] = 0;
		for (i = 0; i < n; i++) count[getByte(a[i], d) + 1]++;
		for (j = 1; j < 257; j++) count[j] += count[j - 1];
		for (i = 0; i < n; i++) b[count[getByte(a[i], d)]++] = a[i];
		for (i = 0; i < n; i++) a[i] = b[i];
	}

	for (i = 0; i < n; i++)
	{
		if (a[i] < ep)
		{
			mid = i;
			break;
		}
	}

	j = 0;
	for (i = n - 1; i >= mid; i--) a[j++] = b[i];
	for (i = 0; i < mid; i++) a[j++] = b[i];

	free(count);
	free(b);
}

void merege(float* a, float* b, float* res, int an, int bn)
{
	int ia = 0, ib = 0, ir = 0;
	float ep = 1e-7;

	while (an > ia && bn > ib)
	{
		if (a[ia] - b[ib] < ep) res[ir++] = a[ia++];
		else res[ir++] = b[ib++];
	}

	for (; ia < an; ia++) res[ir++] = a[ia];
	for (; ib < bn; ib++) res[ir++] = b[ib];
	return;
}

void meregeSort(float* a, int n)
{
	float* b = (float*)malloc(n * sizeof(float));
	int step = 1, i, k = 0;

	for (; step < n; step *= 2)
	{
		for (i = 0; i < n; i += 2 * step)
		{
			merege(a + i, a + i + step, b + i, std::max(0, std::min(step, n - i)), std::max(0, std::min(step, n - step - i)));
		}
		std::swap(a, b);
		k++;
	}
		
	if (k % 2) std::swap(a, b);
	free(b);
	return;
}

void printArray(float* a, int n)
{
	int i;
	for (i = 0; i < n; i++)
	{
		printf("%f ", a[i]);
	}
	printf("\n");
	return;
}

void randomFilling(float* a, int n)
{
	int i;
	for (i = 0; i < n; i++)
	{
		a[i] = (rand() * (float)rand() / (rand() + 1)) * ((rand() % 2) ? -1 : 1);
	}
	return;
}

int main()
{
	srand(time(NULL));
	int n, i;
	float* a;
	for (n = 10; n < 1e9; n *= 100)
	{
		a = (float*)malloc(n * sizeof(float));
		if (a == NULL)
		{
			printf("not memory");
			return -1;
		}
		printf("%i\n", n);
		randomFilling(a, n);

		//printArray(a, n);
		clock_t st = clock();
		bubleSort(a, n);
		clock_t en = clock();
		double seconds = (double)(en - st) / CLOCKS_PER_SEC;
		//printArray(a, n);
		printf("%f\n", seconds);

		free(a);
	}
    return 0;
}
